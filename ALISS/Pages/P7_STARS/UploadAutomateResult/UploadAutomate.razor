@page "/UploadAutomate"
@using ALISS.Data.D7_StarsMapping
@using ALISS.Data
@using ALISS.STARS.DTO
@using System.IO;
@using ALISS.STARS.DTO.RepeatAutomate;
@using ALISS.Data.D1_Upload;
@using ALISS.Data.D2_Mapping;
@using ALISS.Data.D7_StarsRepeat

@inject IJSRuntime jsRuntime
@inject UploadAutomateService UploadAutomateservice
@inject StarsMappingService StarsMappingService
@inject RepeatAutomateService RepeatService
@inject LoginUserData loginUserData
@inject DropDownListDataService ddlDataService
@inject NavigationManager navigationManager
@inject ConfigDataService configDataService
@inject MasterTemplateService masterTemplateService
@inject IBlazorDownloadFileService downloadService
@inject FileService fileService

<style type="text/css">
    .rz-chkbox-box .rzi, .rz-datatable-thead .rz-chkbox-box .rzi {
        background-color: #0a6839;
        color: white;
    }

    .rz-selectable .rz-datatable-even.rz-state-highlight .rz-cell-data, .rz-selectable .rz-datatable-odd.rz-state-highlight .rz-cell-data {
        color: #0a6839;
    }

    .rz-selectable .rz-datatable-even.rz-state-highlight > td, .rz-selectable .rz-datatable-odd.rz-state-highlight > td {
        background-color: #b8ddcc;
    }

    .rz-chkbox-box.rz-state-active {
        background-color: #0a6839;
    }

    .rz-selectable .rz-datatable-odd:hover:not(.rz-state-highlight) .rz-cell-data, .rz-selectable .rz-datatable-even:hover:not(.rz-state-highlight) .rz-cell-data {
        background-color: #e7f4ef;
        color: #0a6839;
    }

    .rz-selectable .rz-datatable-odd:hover:not(.rz-state-highlight) > td,
    .rz-selectable .rz-datatable-even:hover:not(.rz-state-highlight) > td {
        background-color: #e7f4ef;
    }
</style>

<div>
    <div class="divHead">
        Upload Lab File
    </div>
</div>

@if (gridDatas == null || lab_ddl_List == null)
{
    <Loading ShowModel="true" />
    <p><em>Loading...</em></p>
}
else
{
    <div class="container inputArea">
        <div class="row justify-content-between">

            <div class="col-12 col-xl-4">
                <div class="row justify-content-center divGroup">
                    <div class="@classLabel">
                        <LabelBox inputLabel="@configData.Get_Label("afu_Area")" />
                    </div>
                    <div class="@classInput">
                        <RadzenDropDown @bind-Value="searchModel.afu_Area" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowClear="true" TValue="string" AllowFiltering="true" Placeholder="Select..." Data="lab_ddl_List.Select(x => new { x.stars_arh_code, x.stars_arh_name }).Distinct().OrderBy(o=>o.stars_arh_code)" ValueProperty="stars_arh_code" TextProperty="stars_arh_name" Disabled="(!string.IsNullOrEmpty(mainLayout.loginUser.arh_code))" />
                    </div>
                </div>
            </div>

            <div class="col-12 col-xl-4">
                <div class="row justify-content-center divGroup">
                    <div class="@classLabel">
                        <LabelBox inputLabel="@configData.Get_Label("afu_machinetype")" />
                    </div>
                    <div class="@classInput">
                        <RadzenDropDown @bind-Value="searchModel.afu_machinetype" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowClear="true" TValue="string" AllowFiltering="true" Placeholder="Select..." Data="machine_ddl_list.Where(w => w.smp_status == 'A').Select(x => new { x.smp_machinetype }).Distinct().OrderBy(o=>o.smp_machinetype)" ValueProperty="smp_machinetype" TextProperty="smp_machinetype" />
                    </div>
                </div>
            </div>

            <div class="col-12 col-xl-4">
                <div class="row justify-content-center divGroup buttonArea">
                    <div class="col-auto">
                        <RadzenButton class="btnSearch" Text="Search" Click="SearchData" />
                    </div>
                    <div class="col-auto">
                        <RadzenButton class="btnClear" Text="Clear" Click="ClearInboxData" />
                    </div>
                </div>
            </div>


        </div>
    </div>

    <hr />

    <div>
        @if (mainLayout.loginUser.PagePermission.rop_create == true)
        {
            <div class="container">
                <div class="row justify-content-end">
                    <div class="col-auto buttonArea">
                        <RadzenButton Text="Upload File" class="btnAdd"
                                      Click="@ShowUploadEntryDialog" Disabled="@(string.IsNullOrEmpty(searchModel.afu_machinetype) || string.IsNullOrEmpty(searchModel.afu_Area))" />
                    </div>
                    <div class="col-auto buttonArea">
                        <RadzenButton Text="Export Error" class="btnAdd"
                                      Click="@GenerateExcelError" />
                    </div>
                    <div class="col-auto buttonArea">
                        <RadzenButton Text="Import Error" class="btnAdd" Click="@(() => OpenImportErrorMapping())" />
                    </div>
                </div>
            </div>
            <br />
        }
        <div style="width:100%;margin:0px auto;">
            <div class="container">
                <div class="row justify-content-end">
                    <div class="col-auto">
                        <label>Rows : </label>
                    </div>
                    <div class="col-auto">
                        <RadzenDropDown @bind-Value="inboxGrid.PageSize" TValue="int" AllowFiltering="true" Data="inboxGrid.PageSizeOption" Change="SearchData" Style="width:50px" />
                    </div>
                </div>
            </div>
            <RadzenGrid AllowFiltering="true" AllowSorting="true" AllowPaging="true" Style="max-width: 1597px"
                        PageSize="inboxGrid.PageSize" @ref="inboxGrid.radzenGrid" Data="@gridDatas" TItem="UploadAutomateDataDTO"
                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        AllowColumnResize="true">
                <Columns>
                    <RadzenGridColumn TItem="UploadAutomateDataDTO" Property="lfu_id" Width="50px" Filterable="false" Sortable="false">
                        <HeaderTemplate>
                            <RadzenCheckBox TriState="false" TValue="bool" Value="@(gridDatas.Any(i => selectedUploadAutomates != null && selectedUploadAutomates.Contains(i)))"
                                            Change="@(args => selectedUploadAutomates = args ? gridDatas.Where(x => x.afu_status == "w" ).Select(x => x).ToList() : null)" />
                        </HeaderTemplate>
                        <Template Context="data">
                            <RadzenCheckBox TriState="false" Value="@(selectedUploadAutomates != null && selectedUploadAutomates.Contains(data))"
                                            TValue="bool" Change=@(args => { OnGridRowSelected(data); }) />
                        </Template>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="UploadAutomateDataDTO" Property="arh_name" Title="ศูนย์วิทย์" Width="100px">
                        <FooterTemplate>
                            <label title="@inboxGrid.FooterLabelString">@inboxGrid.FooterLabelString</label>
                        </FooterTemplate>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="UploadAutomateDataDTO" Width="120px" Property="afu_machinetype" Title="Machine" />
                    <RadzenGridColumn TItem="UploadAutomateDataDTO" Width="60px" Context="data">
                        <Template>
                            <RadzenButton Icon="get_app" Style="background: #0A6839" Click="@(() => NavigateToDownloadFile(data))" />
                        </Template>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="UploadAutomateDataDTO" Width="200px" Property="afu_filename" Title="File Name" />
                    <RadzenGridColumn TItem="UploadAutomateDataDTO" Width="100px" Property="afu_totalrecord" Title="Total STARS">
                        <Template Context="data">
                            @String.Format("{0:n0}", data.afu_totalrecord)
                        </Template>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="UploadAutomateDataDTO" Width="100px" Property="afu_errorrecord" Title="Error Record">
                        <Template Context="data">
                            @String.Format("{0:n0}", data.afu_errorrecord)
                        </Template>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="UploadAutomateDataDTO" Width="100px" Property="afu_repeat_automaterecord" Title="Repeat Automate">
                        <Template Context="data">
                            @String.Format("{0:n0}", data.afu_repeat_automaterecord)
                        </Template>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="UploadAutomateDataDTO" Width="100px" Property="afu_repeat_generecord" Title="Repeat Gene">
                        <Template Context="data">
                            @String.Format("{0:n0}", data.afu_repeat_generecord)
                        </Template>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="UploadAutomateDataDTO" Width="100px" Property="afu_wait_approverecord" Title="Wait Approve">
                        <Template Context="data">
                            @String.Format("{0:n0}", data.afu_wait_approverecord)
                        </Template>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="UploadAutomateDataDTO" Width="100px" Property="afu_approverecord" Title="Approved">
                        <Template Context="data">
                            @String.Format("{0:n0}", data.afu_approverecord)
                        </Template>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="UploadAutomateDataDTO" Width="70px" Property="afu_status_str" Title="Status" />
                    <RadzenGridColumn TItem="UploadAutomateDataDTO" Width="110px" Property="afu_createdate" Title="Upload Date" />
                    <RadzenGridColumn TItem="UploadAutomateDataDTO" Width="80px" Property="afu_createuser" Title="Upload By" />

                    <RadzenGridColumn TItem="UploadAutomateDataDTO" Property="" Title="" Width="160px" Context="data" Filterable="false" Sortable="false">
                        <Template>
                            <RadzenButton Text="See detail" Style="background: #0A6839 0% 0% no-repeat padding-box;" Click="@(() => OpenUploadAutomateDetail(data.afu_id.ToString()))" Disabled="@(data.afu_status == "N"  || data.afu_status == "R" || data.afu_status == "M" || data.afu_status == "P" ? true : false)" />
                        </Template>
                    </RadzenGridColumn>
                </Columns>
            </RadzenGrid>
        </div>
    </div>
}

@if (ShowUploadEntryPopup == true)
{
    <div class="modal" tabindex="-1" style="display:block;" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                </div>
                <div class="modal-body">
                    <EditForm Model="@UploadFileData" OnValidSubmit="()=> ValidateFile()">
                        <DataAnnotationsValidator />
                        <div class="container inputArea">
                            <div class="row">
                                <div class="col-12">
                                    <div class="row justify-content-center divGroup">
                                        <div class="col">
                                            <LabelBox inputLabel="@configData.Get_Label("afu_Area")" />
                                        </div>
                                        <div class="col">
                                            <RadzenDropDown @bind-Value="UploadFileData.afu_arh_code" Disabled="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowClear="true" TValue="string" AllowFiltering="true" Placeholder="Select..." Data="lab_ddl_List.Select(x => new { x.stars_arh_code, x.stars_arh_name }).Distinct().OrderBy(o=>o.stars_arh_code)" TextProperty="stars_arh_name" ValueProperty="stars_arh_code" />
                                        </div>
                                    </div>
                                </div>
                                <div class="col-12">
                                    <div class="row justify-content-center divGroup">
                                        <div class="col">
                                            <LabelBox inputLabel="@configData.Get_Label("afu_machinetype")" />
                                        </div>
                                        <div class="col">
                                            <RadzenDropDown @bind-Value="UploadFileData.afu_machinetype" Disabled="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowClear="true" TValue="string" AllowFiltering="true" Placeholder="Select..." Data="machine_ddl_list.Where(w => w.smp_status == 'A').Select(x => new { x.smp_machinetype }).Distinct().OrderBy(o=>o.smp_machinetype)" ValueProperty="smp_machinetype" TextProperty="smp_machinetype" />
                                        </div>
                                    </div>
                                </div>

                                @if (UploadFileData.afu_machinetype != "")
                                {
                                    <div class="col-12">
                                        <div class="row justify-content-center divGroup">
                                            <div class="col">
                                                <LabelBox inputLabel="Upload Lab File" />
                                            </div>
                                            <div class="col">
                                                <InputFile OnChange="OnInputFileChange"></InputFile>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-12">
                                        <div class="row justify-content-center divGroup">
                                            <div class="col">
                                                @*<LabelBox inputLabel="Upload Lab File" />*@
                                            </div>
                                            <div class="col" style="font-size:small">
                                                <label>(ไฟล์ต้องมีขนาดไม่เกิน 500MB)</label>
                                            </div>
                                        </div>
                                    </div>

                                    @if (selectedFiles != null)
                                    {
                                        <div class="col-12">
                                            <div class="row justify-content-center divGroup">
                                                <div class="col">
                                                    <LabelBox inputLabel="@configData.Get_Label("Filename")" />
                                                </div>
                                                <div class="col">
                                                    <label>@selectedFiles.Name</label>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-12">
                                            <div class="row justify-content-center divGroup">
                                                <div class="col">
                                                    <div>@LargeUploadMessage</div>
                                                    <progress style="height:50px;width:100%;" value="@UploadedBytes" max="@TotalBytes"></progress>
                                                </div>
                                            </div>
                                        </div>

                                    }
                                }
                            </div>


                            <div class="row justify-content-center">
                                <div class="col-xl-12">
                                    <div class="row justify-content-center divGroup buttonArea">
                                        <div class="col-auto">
                                            <RadzenButton class="btnCancel" Text="Cancel" Click="@(() => ControlPopup("UploadEntry",false))" />
                                        </div>
                                        <div class="col-auto">
                                            <RadzenButton Icon="save" ButtonType="ButtonType.Submit" class="btnSave" Text="Upload"
                                                          disabled="@(selectedFiles == null ? true : false)" />
                                        </div>

                                    </div>
                                </div>
                            </div>
                        </div>

                    </EditForm>
                </div>

            </div>
        </div>
    </div>
}

@*PopupImportError*@
@if (ShowUploadErrorPopup == true)
{
    <div class="modal" tabindex="-1" style="display:block;" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                </div>
                <div class="modal-body">
                    <EditForm Model="@uploadautomateLog" OnValidSubmit="()=> ValidateFileError()">
                        <DataAnnotationsValidator />
                        <div class="container inputArea">
                            <div class="row justify-content-center">

                                <div class="col-12">
                                    <div class="row justify-content-center divGroup">
                                        <div class="col">
                                            <LabelBox inputLabel="Upload Lab File" />
                                        </div>
                                        <div class="col">
                                            <InputFile OnChange="OnInputFileErrorChange"></InputFile>
                                        </div>
                                    </div>
                                </div>

                                <div class="col-12">
                                    <div class="row justify-content-center divGroup">
                                        <div class="col">
                                            @*<LabelBox inputLabel="Upload Lab File" />*@
                                        </div>
                                        <div class="col" style="font-size:small">
                                            <label>(ไฟล์ต้องมีขนาดไม่เกิน 500MB)</label>
                                        </div>
                                    </div>
                                </div>

                                @if (selectedErrorFiles != null)
                                {
                                    <div class="col-12">
                                        <div class="row justify-content-center divGroup">
                                            <div class="col">
                                                <LabelBox inputLabel="@configData.Get_Label("Filename")" />
                                            </div>
                                            <div class="col">
                                                <label>@selectedErrorFiles.Name</label>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-12">
                                        <div class="row justify-content-center divGroup">
                                            <div class="col">
                                                <div>@LargeUploadMessage</div>
                                                <progress style="height:50px;width:100%;" value="@UploadedBytes" max="@TotalBytes"></progress>
                                            </div>
                                        </div>
                                    </div>

                                }
                                <div class="col-xl-12">
                                    <div class="row justify-content-center divGroup buttonArea">
                                        <div class="col-auto">
                                            <RadzenButton class="btnCancel" Text="Cancel" Click="@(() => ControlPopupError(false))" />
                                        </div>
                                        <div class="col-auto">
                                            <RadzenButton Icon="save" ButtonType="ButtonType.Submit" class="btnSave" Text="Upload"
                                                          disabled="@(selectedErrorFiles == null ? true : false)" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<Loading ShowModel="showModal" />

@code {
    [CascadingParameter] MainLayout mainLayout { get; set; }

    private ConfigData configData = new ConfigData();

    private string classLabel = "col-4";
    private string classInput = "col-8";

    private RadzenGridCustom<UploadAutomateDataDTO> inboxGrid = new RadzenGridCustom<UploadAutomateDataDTO>();
    private List<DropDownListDTO> rol_List;
    private List<DropDownListDTO> lab_List = new List<DropDownListDTO>();

    private bool showModal = false;
    private bool ShowUploadEntryPopup = false;
    private bool ShowUploadErrorPopup = false;

    private List<UploadAutomateDataDTO> gridDatas;
    IList<UploadAutomateDataDTO> selectedUploadAutomates;

    LoginUserRolePermissionDTO permission;
    private IBrowserFile selectedFiles;
    private IBrowserFile selectedErrorFiles;

    string LargeUploadMessage = "";
    long UploadedBytes;
    long TotalBytes;

    UploadAutomateSearchDTO searchModel = new UploadAutomateSearchDTO();
    UploadAutomateDataDTO UploadFileData = new UploadAutomateDataDTO();
    UploadAutomateDataDTO UploadFileErrorData = new UploadAutomateDataDTO();

    UploadAutomateLogDTO uploadautomateLog = new UploadAutomateLogDTO();

    private List<HospitalLabDataDTO> lab_ddl_List;
    private List<ParameterDTO> ParameterList;
    private List<STARSMappingListsDTO> machine_ddl_list;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await mainLayout.GetLoginUser();

            if (mainLayout.loginUser.CheckPagePermission("MNU_0802") == false) navigationManager.NavigateTo("/NoPermissionPage");

            configData.ConfigDTOList = await configDataService.Get_TBConfig_DataList_Async(new TBConfigDTO() { tbc_mnu_code = "MNU_0802" });

            var searchData = new HospitalLabDataDTO()
            {
                arh_code = searchModel.afu_Area = UploadFileData.afu_arh_code = mainLayout.loginUser.arh_code
            };


            lab_ddl_List = await ddlDataService.GetAllLabListByModelAsync(searchData);
            machine_ddl_list = await StarsMappingService.GetMappingListByParamAsync(new STARSMappingSearchDTO());
            rol_List = await ddlDataService.GetRoleListByModelAsync();
            ParameterList = await ddlDataService.GetParameterListByModelAsync(new ParameterDTO() { prm_code_major = "UPLOAD_AUTOMATE" });


            gridDatas = await UploadAutomateservice.GetUploadAutomateListByModelAsync(searchModel);
        }
    }

    private async void ClearInboxData()
    {

        searchModel.afu_Area = UploadFileData.afu_arh_code = mainLayout.loginUser.arh_code;
        searchModel.afu_machinetype = "";
        selectedUploadAutomates = null;
        SearchData();
    }

    private async void SearchData()
    {
        showModal = true;

        gridDatas = await UploadAutomateservice.GetUploadAutomateListByModelAsync(searchModel);

        if (inboxGrid.radzenGrid != null) inboxGrid.radzenGrid.GoToPage(0);
        showModal = false;
        StateHasChanged();
    }

    private void DDL_Change(string ddl_name, object value)
    {
        if (ddl_name == "Arh" && value == null)
        {
            searchModel.afu_machinetype = null;
        }
        StateHasChanged();
    }


    async Task ControlPopup(string type, bool control)
    {
        if (type == "UploadEntry")
        {
            ShowUploadEntryPopup = control;

            if (control == false)
            {
                selectedFiles = null;
            }
        }
    }

    async Task ValidateFile()
    {
        string confirmMessage = "";
        confirmMessage = "Confirm upload data." + "\n" + " File Name: " + selectedFiles.Name + "\n";

        var result = await jsRuntime.InvokeAsync<bool>("ShowConfirm", confirmMessage);
        if (result == false)
        {
            return;
        }
        showModal = true;

        string str_CurrentDate = DateTime.Now.ToString("yyyyMMdd");

        string filepath = await UploadAutomateservice.GetPath();
        filepath = Path.Combine(filepath, UploadFileData.afu_arh_code, str_CurrentDate);
        bool exists = System.IO.Directory.Exists(filepath);

        if (!exists)
            System.IO.Directory.CreateDirectory(filepath);

        var filename = Path.Combine(filepath, selectedFiles.Name);

        UploadedBytes = 0;

        TotalBytes = selectedFiles.Size;

        long percent = 0;
        long chunckSize = 400000;
        long numChunks = TotalBytes / chunckSize;
        long remainder = TotalBytes % chunckSize;

        if (File.Exists(filename)) File.Delete(filename);

        using (var inStream = selectedFiles.OpenReadStream(long.MaxValue))
        {
            using (var outStream = File.OpenWrite(filename))
            {
                for (int i = 0; i < numChunks; i++)
                {
                    var buffer = new byte[chunckSize];
                    await inStream.ReadAsync(buffer, 0, buffer.Length);

                    await outStream.WriteAsync(buffer, 0, buffer.Length);

                    UploadedBytes += chunckSize;

                    percent = UploadedBytes * 100 / TotalBytes;

                    LargeUploadMessage = $"กำลังอัปโหลดไฟล์ {percent}%";

                    await InvokeAsync(StateHasChanged);
                }

                if (remainder > 0)
                {
                    var buffer = new byte[remainder];
                    await inStream.ReadAsync(buffer, 0, buffer.Length);

                    await outStream.WriteAsync(buffer, 0, buffer.Length);

                    UploadedBytes += remainder;

                    percent = UploadedBytes * 100 / TotalBytes;

                    LargeUploadMessage = $"กำลังอัปโหลดไฟล์ {percent}%";

                    await InvokeAsync(StateHasChanged);
                }
            }
        }

        LargeUploadMessage = "กำลังตรวจสอบไฟล์ ...";
        await InvokeAsync(StateHasChanged);

        UploadFileData.afu_smp_id = machine_ddl_list.Find(x => x.smp_machinetype == UploadFileData.afu_machinetype).smp_id;
        var chkValidate = await RepeatService.ValidateLabFileAsync(filepath, selectedFiles.Name, UploadFileData.afu_smp_id);

        LargeUploadMessage = "อัปโหลดเรียบร้อยแล้ว";
        await InvokeAsync(StateHasChanged);
        int totalRec = 0;

        if (chkValidate != null)
        {
            string ErrorMessage = "";
            foreach (AutomateFileUploadErrorMessageDTO item in chkValidate)
            {
                if (item.afu_status == 'I' && item.afu_Err_Column == "Total")
                {
                    Int32.TryParse(item.afu_Err_Message, out totalRec);
                    ////ErrorMessage += "Total Record(s) = " + totalRec + "\n";
                    ErrorMessage += "Total Record(s) = " + String.Format("{0:n0}", totalRec) + "\n";
                }
                else if (item.afu_status == 'E')
                    ErrorMessage += "- " + item.afu_Err_Message + "\n";
            }

            await jsRuntime.InvokeAsync<object>("ShowAlert", ErrorMessage);
        }

        var chkError = chkValidate.FirstOrDefault(x => x.afu_status == 'E');

        if (chkError == null)
        {
            var path = chkValidate.FirstOrDefault(x => x.afu_status == 'I' && x.afu_Err_Column == "path").afu_Err_Message;
            await UploadFile(UploadFileData.afu_smp_id, totalRec, path);
            await ControlPopup("UploadEntry", false);
            showModal = false;

            SearchData();
            StateHasChanged();

        }
        else
        {
            showModal = false;
            return;
        }

        UploadedBytes = 0;
        TotalBytes = 0;
        LargeUploadMessage = "";
    }

    private async Task UploadFile(Guid mapping_id, int TotalRec, string path)
    {

        RepeatAutomateDataDTO RepeatFileUpload = new RepeatAutomateDataDTO();

        RepeatFileUpload.afu_smp_id = mapping_id;

        RepeatFileUpload.afu_arh_code = UploadFileData.afu_arh_code;
        RepeatFileUpload.afu_machinetype = UploadFileData.afu_machinetype;//machineType_ddl_List.Find(x => x.data_id == mapping_id.ToString()).data_Text;
        RepeatFileUpload.afu_filename = selectedFiles.Name;
        RepeatFileUpload.afu_path = path;
        RepeatFileUpload.afu_totalrecord = TotalRec;
        RepeatFileUpload.afu_repeat_flag = false;
        RepeatFileUpload.afu_status = "N";

        RepeatFileUpload.afu_createuser = mainLayout.loginUser.Username;
        RepeatFileUpload.afu_repeatuser = mainLayout.loginUser.Username;

        var x = await RepeatService.UploadFileAsync(RepeatFileUpload);

    }

    async Task ShowUploadEntryDialog()
    {
        UploadFileData.afu_arh_code = searchModel.afu_Area;
        UploadFileData.afu_machinetype = searchModel.afu_machinetype;
        ControlPopup("UploadEntry", true);
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.File;

        var type = Path.GetExtension(selectedFiles.Name);

        long maxFileSize = 1024L; // 1KB
        maxFileSize *= 1024L; // 1MB
        maxFileSize *= 512L; // 0.5GB

        if (selectedFiles.Size > maxFileSize)
        {
            await jsRuntime.InvokeAsync<object>("ShowAlert", "ไม่สามารถ Upload ไฟล์ ขนาดมากกว่า 500MB ได้");
            selectedFiles = null;
            return;
        }
    }

    async Task OpenUploadAutomateDetail(string id)
    {

        navigationManager.NavigateTo("UploadAutomateDetail/" + id);

    }

    private async Task NavigateToDownloadFile(UploadAutomateDataDTO lab)
    {
        var FullPath = lab.afu_path;
        if (File.Exists(FullPath))
        {
            byte[] bytes = File.ReadAllBytes(FullPath);
            await downloadService.DownloadFile(lab.afu_filename, bytes, "application/octet-stream");
        }
        else
        {
            await jsRuntime.InvokeAsync<object>("ShowAlert", "File not Found");
        }


    }

    void OnGridRowSelected(UploadAutomateDataDTO lab)
    {
        selectedUploadAutomates = selectedUploadAutomates ?? new List<UploadAutomateDataDTO>();
        if ((lab.afu_status == "W")
            && !selectedUploadAutomates.Contains(lab))
            selectedUploadAutomates.Add(lab);
        else if (selectedUploadAutomates.Contains(lab))
            selectedUploadAutomates.Remove(lab);
    }

    private async Task GenerateExcelError()
    {
        if (selectedUploadAutomates == null || selectedUploadAutomates.Count == 0)
        {
            await jsRuntime.InvokeAsync<object>("ShowAlert", "Please select data!");
            return;
        }

        var filterFDatas = selectedUploadAutomates;
        if (filterFDatas.Where(x => x.afu_status != "W").Count() > 0)
        {
            await jsRuntime.InvokeAsync<object>("ShowAlert", "Please select error record only!");
            return;
        }

        string[] afu_ids = selectedUploadAutomates.Select(x => x.afu_id.ToString()).ToArray();
        string fileName = string.Format("ExportError_{0}", DateTime.Now.ToString("yyyy-MM-dd"));

        try
        {
            UploadAutomateservice.GenerateExportError(jsRuntime, afu_ids, fileName);
        }
        catch (Exception ex)
        {
            await jsRuntime.InvokeAsync<object>("ShowAlert", ex.Message);
        }
    }

    async Task OpenImportErrorMapping()
    {
        ControlPopupError(true);
    }

    async Task ControlPopupError(bool control)
    {
        ShowUploadErrorPopup = control;
        if (control == false)
        {
            selectedErrorFiles = null;
        }
    }

    async Task ValidateFileError()
    {
        string confirmMessage = "";
        confirmMessage = "Confirm upload data." + "\n" + " File Name: " + selectedErrorFiles.Name + "\n";

        var result = await jsRuntime.InvokeAsync<bool>("ShowConfirm", confirmMessage);
        if (result == false)
            return;

        showModal = true;

        string str_CurrentDate = DateTime.Now.ToString("yyyyMMdd");

        string filepath = await UploadAutomateservice.GetPath();
        filepath = Path.Combine(filepath, str_CurrentDate, string.Empty);
        bool exists = System.IO.Directory.Exists(filepath);

        if (!exists)
            System.IO.Directory.CreateDirectory(filepath);

        var filename = Path.Combine(filepath, selectedErrorFiles.Name);

        UploadedBytes = 0;

        TotalBytes = selectedErrorFiles.Size;

        long percent = 0;
        long chunckSize = 400000;
        long numChunks = TotalBytes / chunckSize;
        long remainder = TotalBytes % chunckSize;

        if (File.Exists(filename)) File.Delete(filename);

        using (var inStream = selectedErrorFiles.OpenReadStream(long.MaxValue))
        {
            using (var outStream = File.OpenWrite(filename))
            {
                for (int i = 0; i < numChunks; i++)
                {
                    var buffer = new byte[chunckSize];
                    await inStream.ReadAsync(buffer, 0, buffer.Length);

                    await outStream.WriteAsync(buffer, 0, buffer.Length);

                    UploadedBytes += chunckSize;

                    percent = UploadedBytes * 100 / TotalBytes;

                    LargeUploadMessage = $"กำลังอัปโหลดไฟล์ {percent}%";

                    await InvokeAsync(StateHasChanged);
                }

                if (remainder > 0)
                {
                    var buffer = new byte[remainder];
                    await inStream.ReadAsync(buffer, 0, buffer.Length);

                    await outStream.WriteAsync(buffer, 0, buffer.Length);

                    UploadedBytes += remainder;

                    percent = UploadedBytes * 100 / TotalBytes;

                    LargeUploadMessage = $"กำลังอัปโหลดไฟล์ {percent}%";

                    await InvokeAsync(StateHasChanged);
                }
            }
        }

        LargeUploadMessage = "กำลังตรวจสอบไฟล์ ...";
        await InvokeAsync(StateHasChanged);

        var chkValidate = await UploadAutomateservice.ValidateFileAsync(filepath, selectedErrorFiles.Name);

        LargeUploadMessage = "อัปโหลดเรียบร้อยแล้ว";
        await InvokeAsync(StateHasChanged);
        int totalRec = 0;
        if (chkValidate != null)
        {
            string ErrorMessage = "";
            foreach (UploadAutomateLogErrorMessageDTO item in chkValidate)
            {
                if (item.afu_status == 'I' && item.afu_Err_Column == "data_code")
                    ErrorMessage += "Data Code Record(s) = " + item.afu_Err_Message + "\n";
                if (item.afu_status == 'I' && item.afu_Err_Column == "Total")
                {
                    Int32.TryParse(item.afu_Err_Message, out totalRec);
                    ErrorMessage += "Total Record(s) = " + String.Format("{0:n0}", totalRec) + "\n";
                }
                else if (item.afu_status == 'E')
                    ErrorMessage += "- " + item.afu_Err_Message + "\n";
            }
            await jsRuntime.InvokeAsync<object>("ShowAlert", ErrorMessage);
        }

        var chkError = chkValidate.FirstOrDefault(x => x.afu_status == 'W');

        if (chkError == null)
        {
            //var path = chkValidate.FirstOrDefault(x => x.afu_status == 'W' && x.afu_Err_Column == "path").afu_Err_Message;
            await UploadFileError(filename, totalRec, 0, string.Empty);
            await ControlPopupError(false);
            showModal = false;

            SearchData();
            StateHasChanged();

        }
        else
        {
            showModal = false;
            return;
        }

        UploadedBytes = 0;
        TotalBytes = 0;
        LargeUploadMessage = "";

    }

    private async Task OnInputFileErrorChange(InputFileChangeEventArgs e)
    {
        selectedErrorFiles = e.File;

        var type = Path.GetExtension(selectedErrorFiles.Name);
        if (type != ".xlsx")
        {
            await jsRuntime.InvokeAsync<object>("ShowAlert", "ไม่สามารถ Upload ไฟล์ประเภท " + type + "ได้ (ระบบรองรับ .xlsx เท่านั้น)");
            selectedFiles = null;
            return;
        }

        long maxFileSize = 1024L; // 1KB
        maxFileSize *= 1024L; // 1MB
        maxFileSize *= 512L; // 0.5GB

        if (selectedErrorFiles.Size > maxFileSize)
        {
            await jsRuntime.InvokeAsync<object>("ShowAlert", "ไม่สามารถ Upload ไฟล์ ขนาดมากกว่า 500MB ได้");
            selectedErrorFiles = null;
            return;
        }
    }

    async Task UploadFileError(string file_name, int total_record, int who_record, string status)
    {

        UploadAutomateLogDTO model = new UploadAutomateLogDTO();

        model.iml_import_date = DateTime.Now;
        model.iml_filename = file_name;
        model.iml_total_record = total_record;
        model.iml_who_record = who_record;
        model.iml_status = status;
        model.iml_createduser = mainLayout.loginUser.Username;
        model.iml_createdate = DateTime.Now;

        var x = await UploadAutomateservice.UploadFileAsync(model);

    }
}
